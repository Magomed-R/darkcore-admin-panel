import { config } from "dotenv";
config();

import TelegramBot from "node-telegram-bot-api";

import mongoose from "mongoose";
import chalk from "chalk";

mongoose
    .connect(`mongodb+srv://${process.env.MONGO_USERNAME}:${process.env.MONGO_PASSWORD}@cluster.dvfjqpc.mongodb.net/darkcore`)
    .then((res) => console.log(chalk.bgGreen.bold("Connected to DB")))
    .catch((error) => console.log(error));

import Group from "./Models/Group.js";
import Button from "./Models/Button.js";
import Category from "./Models/Category.js";
import Mailing from "./Models/Mailing.js";
import User from "./Models/User.js";

let status = [
    {
        chatId: process.env.CLIENT_ID,
        place: 1,
        title: "",
        button: "",
        editingButton: "",
        editingButtonText: "",
        editingCategoryTitle: "",
        editingCategoryText: "",
    },
    {
        chatId: process.env.DEVELOP_ID,
        place: 1,
        title: "",
        button: "",
        editingButton: "",
        editingButtonText: "",
        editingCategoryTitle: "",
        editingCategoryText: "",
    },
];

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

bot.setMyCommands([
    {
        command: "/menu",
        description: "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é",
    },
    {
        command: "/stata",
        description: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    },
]);

bot.on("polling_error", console.log);

bot.on("message", async (message) => {
    const chatId = message.chat.id;
    const index = status.findIndex((el) => el.chatId == chatId);

    if (chatId != process.env.CLIENT_ID && chatId != process.env.DEVELOP_ID) return bot.sendMessage(chatId, "‚õî–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω");
    else {
        if (message.text.includes("/stata")) {
            bot.deleteMessage(chatId, message.message_id);

            let users = await User.find().sort({ createdAt: -1 });
            let result = "–í—Å–µ–≥–æ " + users.length + " –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ü–æ–¥–ø–∏—Å–∞–ª—Å—è\n";

            for (let i = 0; i < users.length; i++) {
                result += `@${users[i].username} - ${getDate(users[i].createdAt)}\n`;
                if (i % 50 == 0 && i != 0) {
                    bot.sendMessage(chatId, result);
                    result = ''
                }
            }

            bot.sendMessage(chatId, result);

            return;
        } else if (status[index].place == 1 || message.text == "/menu") {
            status[index].place == 1;
            bot.sendMessage(chatId, "–ß—Ç–æ –º–µ–Ω—è—Ç—å?", {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–ú–µ–Ω—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
                                callback_data: "editSubMenu",
                            },
                        ],
                        [
                            {
                                text: "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
                                callback_data: "editMenu",
                            },
                        ],
                        [
                            {
                                text: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                                callback_data: "editCategory",
                            },
                        ],
                        [
                            {
                                text: "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                                callback_data: "newMessage",
                            },
                        ],
                    ],
                },
            });
        } else if (status[index].place == 2) {
            status[index].title = message.text;

            bot.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é");

            status[index].place = 3;
        } else if (status[index].place == 3) {
            let lastCategory = await Category.find();

            let newCategory = new Category({
                title: status[index].title,
                callback: message.text,
                order: lastCategory.length + 1,
            });

            await newCategory.save();

            bot.sendMessage(chatId, "‚úÖ–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞");

            status[index].place = 1;
        } else if (status[index].place == 4) {
            status[index].button = message.text;

            bot.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é");

            status[index].place = 5;
        } else if (status[index].place == 5) {
            let buttons = await Button.find().sort({ order: -1 });

            let newButton = new Button({
                order: buttons[0].order + 1,
                text: status[index].button,
                url: message.text,
            });

            await newButton.save();

            bot.sendMessage(chatId, "‚úÖ–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω—é");

            status[index].place = 1;
        } else if (status[index].place == 6) {
            let button = await Button.findOne({ _id: status[index].editingButton });

            button.text = message.text;

            await button.save();

            bot.sendMessage(chatId, "‚úÖ–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ");

            status[index].place = 1;
        } else if (status[index].place == 7) {
            let button = await Button.findOne({ _id: status[index].editingButtonText });

            button.url = message.text;

            await button.save();

            bot.sendMessage(chatId, "‚úÖ–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω");

            status[index].place = 1;
        } else if (status[index].place == 8) {
            let category = await Category.findOne({ _id: status[index].editingCategoryTitle });

            category.title = message.text;

            await category.save();

            bot.sendMessage(chatId, "‚úÖ–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ");

            status[index].place = 1;
        } else if (status[index].place == 9) {
            let category = await Category.findOne({ _id: status[index].editingCategoryText });

            category.callback = message.text;

            await category.save();

            bot.sendMessage(chatId, "‚úÖ–¢–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω");

            status[index].place = 1;
        } else if (status[index].place == 10) {
            let newGroup = new Group({
                group: message.text.slice(13),
            });

            await newGroup.save();

            bot.sendMessage(chatId, "‚úÖ–ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞");

            status[index].place = 1;
        } else if (status[index].place == 11) {
            let newMailing = new Mailing({
                text: message.text,
                status: "not processed",
            });

            newMailing.save();

            bot.sendMessage(chatId, "‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");

            status[index].place = 1;
        }
    }
});

bot.on("callback_query", async (message) => {
    const method = message.data.split(" ")[0];
    const chatId = message.message.chat.id;
    const messageId = message.message.message_id;
    const index = status.findIndex((el) => el.chatId == chatId);
    const mess = { chat_id: chatId, message_id: messageId };

    if (method == "editCategory") {
        bot.editMessageReplyMarkup(
            {
                inline_keyboard: [
                    [
                        {
                            text: "‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                            callback_data: "addCategory",
                        },
                    ],
                    [
                        {
                            text: "‚úíÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                            callback_data: "editCategoryTitle",
                        },
                    ],
                    [
                        {
                            text: "‚úíÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                            callback_data: "editingCategoryText",
                        },
                    ],
                    [
                        {
                            text: "üîÅ–ü–æ–º–µ–Ω—è—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ—Å—Ç–∞–º–∏",
                            callback_data: "replaceCategory",
                        },
                    ],
                    [
                        {
                            text: "‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                            callback_data: "deleteCategory",
                        },
                    ],
                ],
            },
            mess
        );
    } else if (method == "addCategory") {
        bot.editMessageReplyMarkup({ inline_keyboard: [] }, mess);
        bot.editMessageText("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", mess);

        status[index].place = 2;
    } else if (method == "deleteCategory") {
        let id = message.data.split(" ")[1];

        if (id) {
            await Category.deleteOne({ _id: id });
            bot.sendMessage(chatId, "‚úÖ–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!");
        }

        bot.editMessageText("üóëÔ∏è–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å", mess);

        let categories = await Category.find();
        categories = categories.map((el) => [{ text: el.title, callback_data: "deleteCategory " + el._id }]);

        bot.editMessageReplyMarkup({ inline_keyboard: categories }, mess);
    } else if (method == "editMenu") {
        bot.editMessageReplyMarkup(
            {
                inline_keyboard: [
                    [
                        {
                            text: "‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é",
                            callback_data: "addButton",
                        },
                    ],
                    [
                        {
                            text: "‚úíÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏",
                            callback_data: "editMenuTitle",
                        },
                    ],
                    [
                        {
                            text: "‚úíÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏",
                            callback_data: "editMenuText",
                        },
                    ],
                    [
                        {
                            text: "üîÅ–ü–æ–º–µ–Ω—è—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ—Å—Ç–∞–º–∏",
                            callback_data: "replaceButton",
                        },
                    ],
                    [
                        {
                            text: "‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é",
                            callback_data: "deleteButton",
                        },
                    ],
                ],
            },
            mess
        );
    } else if (method == "addButton") {
        bot.editMessageReplyMarkup({ inline_keyboard: [] }, mess);
        bot.editMessageText("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏", mess);

        status[index].place = 4;
    } else if (method == "deleteButton") {
        let id = message.data.split(" ")[1];

        if (id) {
            await Button.deleteOne({ _id: id });
            bot.sendMessage(chatId, "‚úÖ–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–µ–Ω—é!");
        }

        bot.editMessageText("üóëÔ∏è–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å", mess);

        let buttons = await Button.find();
        buttons = buttons.map((el) => [{ text: el.text, callback_data: "deleteButton " + el._id }]);

        bot.editMessageReplyMarkup({ inline_keyboard: buttons }, mess);
    } else if (method == "editMenuTitle") {
        let id = message.data.split(" ")[1];

        if (id) {
            status[index].editingButton = id;
            status[index].place = 6;

            bot.sendMessage(chatId, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏");
        } else {
            let buttons = await Button.find();

            buttons = buttons.map((el) => [{ text: el.text, callback_data: "editMenuTitle " + el._id }]);
            bot.editMessageReplyMarkup({ inline_keyboard: buttons }, mess);
        }
    } else if (method == "editMenuText") {
        let id = message.data.split(" ")[1];

        if (id) {
            status[index].editingButtonText = id;
            status[index].place = 7;

            let button = await Button.findOne({ _id: id });

            bot.sendMessage(chatId, "–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: \n\n" + button.url + "\n\n–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏");
        } else {
            let buttons = await Button.find();

            buttons = buttons.map((el) => [{ text: el.text, callback_data: "editMenuText " + el._id }]);
            bot.editMessageReplyMarkup({ inline_keyboard: buttons }, mess);
        }
    } else if (method == "editCategoryTitle") {
        let id = message.data.split(" ")[1];

        if (id) {
            status[index].editingCategoryTitle = id;
            status[index].place = 8;

            bot.sendMessage(chatId, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
        } else {
            let categories = await Category.find();

            categories = categories.map((el) => [{ text: el.title, callback_data: "editCategoryTitle " + el._id }]);
            bot.editMessageReplyMarkup({ inline_keyboard: categories }, mess);
        }
    } else if (method == "editingCategoryText") {
        let id = message.data.split(" ")[1];

        if (id) {
            status[index].editingCategoryText = id;
            status[index].place = 9;

            let category = await Category.findOne({ _id: id });

            bot.sendMessage(chatId, "–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: \n\n" + category.callback + "\n\n–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
        } else {
            let categories = await Category.find();

            categories = categories.map((el) => [{ text: el.title, callback_data: "editingCategoryText " + el._id }]);
            bot.editMessageReplyMarkup({ inline_keyboard: categories }, mess);
        }
    } else if (method == "editSubMenu") {
        bot.editMessageReplyMarkup(
            {
                inline_keyboard: [
                    [
                        {
                            text: "‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏",
                            callback_data: "addSubButton",
                        },
                    ],
                    [
                        {
                            text: "‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏",
                            callback_data: "deleteSubButton",
                        },
                    ],
                ],
            },
            mess
        );
    } else if (method == "addSubButton") {
        bot.editMessageReplyMarkup({ inline_keyboard: [] }, mess);
        bot.editMessageText(
            "–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: \nhttps://t.me/<i>—Ç—É—Ç —Å—Å—ã–ª–∫–∞</i>",
            { chat_id: chatId, message_id: messageId, parse_mode: "HTML" }
        );

        status[index].place = 10;
    } else if (method == "deleteSubButton") {
        let id = message.data.split(" ")[1];

        if (id) {
            await Group.deleteOne({ _id: id });
            bot.sendMessage(chatId, "‚úÖ–ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–µ–Ω—é!");
        }

        bot.editMessageText("üóëÔ∏è–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å", mess);

        let buttons = await Group.find();
        buttons = buttons.map((el) => [{ text: el.group, callback_data: "deleteSubButton " + el._id }]);

        bot.editMessageReplyMarkup({ inline_keyboard: buttons }, mess);
    } else if (method == "replaceButton") {
        let firstId = message.data.split(" ")[1];
        let secondId = message.data.split(" ")[2];

        if (secondId) {
            let firstButton = await Button.findOne({ _id: firstId });
            let secondButton = await Button.findOne({ _id: secondId });
            let temp = 0;

            temp = secondButton.order;
            secondButton.order = firstButton.order;
            firstButton.order = temp;

            await firstButton.save();
            await secondButton.save();

            bot.sendMessage(chatId, "‚úÖ–ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –º–µ—Å—Ç–∞–º–∏");
        } else if (firstId) {
            bot.editMessageText("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã", mess);

            let buttons = await Button.find().sort({ order: 1 });
            buttons = buttons.map((el) => [{ text: el.text, callback_data: message.data + " " + el._id }]);

            bot.editMessageReplyMarkup({ inline_keyboard: buttons }, mess);
        } else {
            bot.editMessageText("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã", mess);

            let buttons = await Button.find().sort({ order: 1 });
            buttons = buttons.map((el) => [{ text: el.text, callback_data: "replaceButton " + el._id }]);

            bot.editMessageReplyMarkup({ inline_keyboard: buttons }, mess);
        }
    } else if (method == "replaceCategory" || method == "rC") {
        let firstId = message.data.split(" ")[1];
        let secondId = message.data.split(" ")[2];

        if (secondId) {
            let firstButton = await Category.findOne({ _id: firstId });
            let secondButton = await Category.findOne({ _id: secondId });
            let temp = 0;

            temp = secondButton.order;
            secondButton.order = firstButton.order;
            firstButton.order = temp;

            await firstButton.save();
            await secondButton.save();

            let buttons = await Category.find().sort({ order: 1 });
            buttons = buttons.map((el) => [{ text: el.title, callback_data: "rC " + el._id }]);

            bot.editMessageReplyMarkup({ inline_keyboard: buttons }, mess);

            bot.sendMessage(chatId, "‚úÖ–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –º–µ—Å—Ç–∞–º–∏");
        } else if (firstId) {
            bot.editMessageText("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–º–µ–Ω—ã", mess);

            let buttons = await Category.find().sort({ order: 1 });
            buttons = buttons.map((el) => [{ text: el.title, callback_data: message.data + " " + el._id }]);

            bot.editMessageReplyMarkup({ inline_keyboard: buttons }, mess);
        } else {
            bot.editMessageText("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–º–µ–Ω—ã", mess);

            let buttons = await Category.find().sort({ order: 1 });

            buttons = buttons.map((el) => [{ text: el.title, callback_data: "rC " + el._id }]);

            bot.editMessageReplyMarkup({ inline_keyboard: buttons }, mess);
        }
    } else if (method == "newMessage") {
        bot.editMessageText("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", mess);
        status[index].place = 11;
    }
});

import dayjs from "dayjs";

function getDate(date) {
    return dayjs(date).format("DD.MM.YYYY");
}
